import random
import copy
import scoringMatrix
import numpy as np

# Read generations from file
f = open('data.txt','r')
dat = f.read().splitlines()
ffirst = open('dataFirstLast.txt','r')
firstDat = ffirst.read().splitlines()
# Randomly reorder
random.shuffle(dat)
scoreArr = []


originalSeq = firstDat[0]
print(originalSeq)


# Code from lecture
# Init score, direction matrix
scorematrix = [[0] * (len(originalSeq)+1) for _ in range(len(dat[0])+1)]
directionmatrix = [[8] * (len(originalSeq)+1) for _ in range(len(dat[0])+1)]

savedScoreMat = copy.deepcopy(scorematrix)
savedDirectionMat = copy.deepcopy(directionmatrix)

for i in range(0,len(originalSeq)+1):
    scorematrix[0][i] = -8*i
    directionmatrix[0][i]  = 1
for i in range(0,len(dat[0])+1):
    scorematrix[i][0] = -8*i
    directionmatrix[i][0] = 0


# calculate scores for all sequences
for k in range(len(dat)):
    for j in range(1,len(dat[0])+1):
        for i in range(1,len(originalSeq)+1):
            v = scorematrix[j-1][i] + scoringMatrix.gappenalty
            h = scorematrix[j][i-1] + scoringMatrix.gappenalty
            x = scoringMatrix.aminoDictionary[originalSeq[i-1]]
            y = scoringMatrix.aminoDictionary[dat[k][j-1]]
            d = scorematrix[j-1][i-1] + scoringMatrix.blosum50[x][y]
            scorematrix[j][i] = max(v,h,d)
            if(v > h and v > d):
                directionmatrix[j][i] = 0 # 0 - vertical move
            if(h > v and h > d):
                directionmatrix[j][i] = 1 # 1 - horizontal move
            if(d >= v and d >= h):
                directionmatrix[j][i] = 2 # 2 - diagonal move
    x = len(originalSeq)
    y = len(dat[k])
    # print("Score = ",scorematrix[y][x])
    scoreArr.append([scorematrix[y][x], dat[k]])
    # alignedseq1 = []
    # alignedseq2 = []
    # while(x != 0 or y != 0):
    #     if(directionmatrix[y][x] == 2): # diagonal
    #         x = x - 1   # x -= 1 or x--
    #         y = y - 1
    #         alignedseq1.append(originalSeq[x])
    #         alignedseq2.append(dat[k][y])
    #         # if(originalSeq[x] == dat[k][y]):
    #             # print(originalSeq[x], originalSeq[x], dat[k][y],end = " ")
    #         # elif(scorematrix[y][x] < 0):
    #             # print(originalSeq[x], "-", dat[k][y], end = " ")
    #         # else:
    #             # print(originalSeq[x], "+", dat[k][y], end = " ")
    #         # if(originalSeq[x] == dat[k][y] == 'e'):
    #         #     print("important info", end = " ")
    #         # print()
    #     if(directionmatrix[y][x] == 0): # vertical
    #         y = y - 1
    #         alignedseq1.append('_')
    #         alignedseq2.append(dat[k][y])
    #         # print("_", " ", dat[k][y])
    #     if(directionmatrix[y][x] == 1): # horizontal
    #         x = x - 1
    #         alignedseq1.append(originalSeq[x])
    #         alignedseq2.append('_')
            # print(originalSeq[x], " ", "_")


    # print(alignedseq1)
    # print(alignedseq2)
    # alignedseq1.reverse()
    # alignedseq2.reverse()
    # print(''.join(alignedseq1))
    # print(''.join(alignedseq2))


    scorematrix = copy.deepcopy(savedScoreMat)
    directionmatrix = copy.deepcopy(savedDirectionMat)


# print(scoreArr)
npScoreArr = np.array(scoreArr)
npScoreArr = npScoreArr[np.argsort(npScoreArr[:,0])]
npScoreArr = npScoreArr[::-1]

print(npScoreArr)

for i in range(len(npScoreArr)):
    npScoreArr[i][0] = i

print(npScoreArr)



scoredArray = npScoreArr[1]
fscored = open('data.txt','r')
finalDat = fscored.read().splitlines()
finalDat = np.array(finalDat)

for i in range(len(scoredArr)):
    for j in range(len(scoredArray)):
        if(scoredArray[i] == finalDat[j]):
            print("TRUE")


fscored.close()
f.close()
ffirst.close()
